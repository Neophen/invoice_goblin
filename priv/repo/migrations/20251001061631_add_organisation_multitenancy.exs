defmodule InvoiceGoblin.Repo.Migrations.AddOrganisationMultitenancy do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:organisations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:organisation_memberships, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :role, :text, null: false, default: "member"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "organisation_memberships_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "organisation_memberships_organisation_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:organisation_memberships, [:user_id, :organisation_id],
             name: "organisation_memberships_unique_user_organisation_index"
           )

    drop constraint(:ledger_transfers, "ledger_transfers_to_account_id_fkey")

    drop constraint(:ledger_transfers, "ledger_transfers_from_account_id_fkey")

    alter table(:ledger_transfers) do
      add :organisation_id, :uuid, null: false

      modify :from_account_id,
             references(:ledger_accounts,
               column: :id,
               name: "ledger_transfers_from_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :to_account_id,
             references(:ledger_accounts,
               column: :id,
               name: "ledger_transfers_to_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:ledger_balances, "ledger_balances_account_id_fkey")

    drop constraint(:ledger_balances, "ledger_balances_transfer_id_fkey")

    alter table(:ledger_balances) do
      add :organisation_id, :uuid, null: false
    end

    drop_if_exists unique_index(:ledger_balances, [:account_id, :transfer_id],
                     name: "ledger_balances_unique_references_index"
                   )

    alter table(:ledger_balances) do
      modify :transfer_id,
             references(:ledger_transfers,
               column: :id,
               name: "ledger_balances_transfer_id_fkey",
               type: :binary,
               prefix: "public"
             )

      modify :account_id,
             references(:ledger_accounts,
               column: :id,
               name: "ledger_balances_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:ledger_balances, [:organisation_id, :account_id, :transfer_id],
             name: "ledger_balances_unique_references_index"
           )

    alter table(:ledger_accounts) do
      add :organisation_id, :uuid, null: false
    end

    drop_if_exists unique_index(:ledger_accounts, [:identifier],
                     name: "ledger_accounts_unique_identifier_index"
                   )

    create unique_index(:ledger_accounts, [:organisation_id, :identifier],
             name: "ledger_accounts_unique_identifier_index"
           )
  end

  def down do
    drop_if_exists unique_index(:ledger_accounts, [:organisation_id, :identifier],
                     name: "ledger_accounts_unique_identifier_index"
                   )

    create unique_index(:ledger_accounts, [:identifier],
             name: "ledger_accounts_unique_identifier_index"
           )

    alter table(:ledger_accounts) do
      remove :organisation_id
    end

    drop_if_exists unique_index(:ledger_balances, [:organisation_id, :account_id, :transfer_id],
                     name: "ledger_balances_unique_references_index"
                   )

    drop constraint(:ledger_balances, "ledger_balances_transfer_id_fkey")

    drop constraint(:ledger_balances, "ledger_balances_account_id_fkey")

    alter table(:ledger_balances) do
      modify :account_id,
             references(:ledger_accounts,
               column: :id,
               name: "ledger_balances_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :transfer_id,
             references(:ledger_transfers,
               column: :id,
               name: "ledger_balances_transfer_id_fkey",
               type: :binary,
               prefix: "public"
             )
    end

    create unique_index(:ledger_balances, [:account_id, :transfer_id],
             name: "ledger_balances_unique_references_index"
           )

    alter table(:ledger_balances) do
      remove :organisation_id
    end

    drop constraint(:ledger_transfers, "ledger_transfers_from_account_id_fkey")

    drop constraint(:ledger_transfers, "ledger_transfers_to_account_id_fkey")

    alter table(:ledger_transfers) do
      modify :to_account_id,
             references(:ledger_accounts,
               column: :id,
               name: "ledger_transfers_to_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :from_account_id,
             references(:ledger_accounts,
               column: :id,
               name: "ledger_transfers_from_account_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      remove :organisation_id
    end

    drop_if_exists unique_index(:organisation_memberships, [:user_id, :organisation_id],
                     name: "organisation_memberships_unique_user_organisation_index"
                   )

    drop constraint(:organisation_memberships, "organisation_memberships_user_id_fkey")

    drop constraint(:organisation_memberships, "organisation_memberships_organisation_id_fkey")

    drop table(:organisation_memberships)

    drop table(:organisations)
  end
end
