defmodule InvoiceGoblin.Repo.Migrations.AddInitMigrations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:waitlist, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:waitlist, [:email], name: "waitlist_unique_email_index")

    create table(:transactions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :booking_date, :date, null: false
      add :direction, :text, null: false
      add :amount, :money_with_currency, null: false
      add :bank_mark, :text
      add :doc_number, :text
      add :code, :text
      add :counterparty_name, :text
      add :counterparty_reg_code, :text
      add :payment_purpose, :text
      add :counterparty_iban, :text
      add :payment_code, :text
      add :source_row_hash, :text
      add :invoice_id, :uuid
      add :organisation_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :statement_id, :uuid
      add :counter_party_id, :uuid
    end

    create table(:statements, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text
      add :file_url, :text, null: false
      add :file_name, :text
      add :file_size, :bigint
      add :statement_date, :date
      add :account_iban, :text
      add :statement_period_start, :date
      add :statement_period_end, :date
      add :processing_errors, :text
      add :organisation_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:organisations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :company_code, :text
      add :vat_id, :text
      add :address_line_1, :text
      add :address_line_2, :text
      add :address_line_3, :text
      add :city, :text
      add :state_province, :text
      add :postal_code, :text
      add :country, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:organisation_memberships, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :role, :text, null: false, default: "member"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "organisation_memberships_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "organisation_memberships_organisation_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:organisation_memberships, [:user_id, :organisation_id],
             name: "organisation_memberships_unique_user_organisation_index"
           )

    create table(:invoices, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:transactions) do
      modify :invoice_id,
             references(:invoices,
               column: :id,
               name: "transactions_invoice_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :statement_id,
             references(:statements,
               column: :id,
               name: "transactions_statement_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:invoices) do
      add :title, :text, null: false
      add :file_url, :text, null: false
      add :file_name, :text
      add :file_size, :bigint
      add :file_type, :text
      add :direction, :text, null: false, default: "outgoing"
      add :invoice_date, :date
      add :due_date, :date
      add :amount, :decimal
      add :currency, :text, default: "EUR"
      add :status, :text, null: false, default: "processing"
      add :parsed_data, :map
      add :processing_errors, :text
      add :organisation_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :counter_party_id, :uuid
      add :transaction_id, :uuid
    end

    create table(:invoice_line_items, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :description, :text
      add :amount, :decimal
      add :currency, :text, default: "EUR"
      add :item_index, :bigint
      add :organisation_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :invoice_id,
          references(:invoices,
            column: :id,
            name: "invoice_line_items_invoice_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :transaction_id,
          references(:transactions,
            column: :id,
            name: "invoice_line_items_transaction_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:counter_parties, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:transactions) do
      modify :counter_party_id,
             references(:counter_parties,
               column: :id,
               name: "transactions_counter_party_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:transactions, [:organisation_id, :source_row_hash],
             name: "transactions_by_source_row_index",
             where: "(source_row_hash IS NOT NULL)"
           )

    alter table(:invoices) do
      modify :counter_party_id,
             references(:counter_parties,
               column: :id,
               name: "invoices_counter_party_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :transaction_id,
             references(:transactions,
               column: :id,
               name: "invoices_transaction_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:counter_parties) do
      add :name, :text, null: false
      add :type, :text, null: false, default: "company"
      add :email, :text
      add :phone, :text
      add :address, :text
      add :registration_number, :text
      add :tax_number, :text
      add :website, :text
      add :notes, :text
      add :organisation_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:bank_accounts, primary_key: false) do
      add :uuidv7, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :holder_name, :text
      add :bank_name, :text
      add :iban, :text
      add :bic, :text
      add :currency, :text
      add :type, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :organisation_id,
          references(:organisations,
            column: :id,
            name: "bank_accounts_organisation_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:bank_accounts, "bank_accounts_organisation_id_fkey")

    drop table(:bank_accounts)

    alter table(:counter_parties) do
      remove :updated_at
      remove :inserted_at
      remove :organisation_id
      remove :notes
      remove :website
      remove :tax_number
      remove :registration_number
      remove :address
      remove :phone
      remove :email
      remove :type
      remove :name
    end

    drop constraint(:invoices, "invoices_counter_party_id_fkey")

    drop constraint(:invoices, "invoices_transaction_id_fkey")

    alter table(:invoices) do
      modify :transaction_id, :uuid
      modify :counter_party_id, :uuid
    end

    drop_if_exists unique_index(:transactions, [:organisation_id, :source_row_hash],
                     name: "transactions_by_source_row_index"
                   )

    drop constraint(:transactions, "transactions_counter_party_id_fkey")

    alter table(:transactions) do
      modify :counter_party_id, :uuid
    end

    drop table(:counter_parties)

    drop constraint(:invoice_line_items, "invoice_line_items_invoice_id_fkey")

    drop constraint(:invoice_line_items, "invoice_line_items_transaction_id_fkey")

    drop table(:invoice_line_items)

    alter table(:invoices) do
      remove :transaction_id
      remove :counter_party_id
      remove :updated_at
      remove :inserted_at
      remove :organisation_id
      remove :processing_errors
      remove :parsed_data
      remove :status
      remove :currency
      remove :amount
      remove :due_date
      remove :invoice_date
      remove :direction
      remove :file_type
      remove :file_size
      remove :file_name
      remove :file_url
      remove :title
    end

    drop constraint(:transactions, "transactions_invoice_id_fkey")

    drop constraint(:transactions, "transactions_statement_id_fkey")

    alter table(:transactions) do
      modify :statement_id, :uuid
      modify :invoice_id, :uuid
    end

    drop table(:invoices)

    drop_if_exists unique_index(:organisation_memberships, [:user_id, :organisation_id],
                     name: "organisation_memberships_unique_user_organisation_index"
                   )

    drop constraint(:organisation_memberships, "organisation_memberships_user_id_fkey")

    drop constraint(:organisation_memberships, "organisation_memberships_organisation_id_fkey")

    drop table(:organisation_memberships)

    drop table(:organisations)

    drop table(:statements)

    drop table(:transactions)

    drop_if_exists unique_index(:waitlist, [:email], name: "waitlist_unique_email_index")

    drop table(:waitlist)
  end
end
